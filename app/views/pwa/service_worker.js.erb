const CACHE_VERSION = 'fridgey-v1';
const CACHE_NAME = 'fridgey-cache-' + CACHE_VERSION;

// キャッシュするリソース
const CACHE_ASSETS = [
  '<%= root_path %>',
  '<%= rooms_path %>',
  '/logo.svg',
  '/icon.png',
  '/icon.svg'
];

// Service Worker のインストール
self.addEventListener('install', (event) => {
  console.log('Service Worker installing...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened cache');
        return cache.addAll(CACHE_ASSETS);
      })
      .then(() => {
        console.log('All resources have been fetched and cached.');
        return self.skipWaiting();
      })
  );
});

// Service Worker のアクティベート
self.addEventListener('activate', (event) => {
  console.log('Service Worker activating...');
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('Service Worker activated');
      return self.clients.claim();
    })
  );
});

// ネットワークリクエストをインターセプト
self.addEventListener('fetch', (event) => {
  // GET リクエストのみキャッシュ対象
  if (event.request.method !== 'GET') {
    return;
  }

  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        // キャッシュにある場合はそれを返す
        if (response) {
          console.log('Serving from cache:', event.request.url);
          return response;
        }

        // キャッシュにない場合はネットワークから取得
        console.log('Fetching from network:', event.request.url);
        return fetch(event.request)
          .then((response) => {
            // レスポンスが有効でない場合はそのまま返す
            if (!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }

            // レスポンスをキャッシュに保存
            const responseToCache = response.clone();
            caches.open(CACHE_NAME)
              .then((cache) => {
                cache.put(event.request, responseToCache);
              });

            return response;
          })
          .catch(() => {
            // ネットワークエラーの場合、基本的なフォールバックページを表示
            console.log('Network failed, serving fallback');
            return caches.match('<%= root_path %>');
          });
      })
  );
});

// プッシュ通知の受信（将来の機能拡張用）
self.addEventListener('push', (event) => {
  console.log('Push message received');
  // 将来的にプッシュ通知機能を追加する際に使用
});
